{"_id":"note:VmCCQYtU_","title":"WEEK 2","content":"## Symmetric Key Encryption\nSame key is used to encrypt the message (transform plaintext into\nciphertext) and to decrypt the message (transform ciphertext back into\nplaintext)\n\n### Substitution Ciphers\nRotate letters forward by 13 position to encrypt and rotate letters backward by 13 positions to encrypt.\n\n**example**\n\n> \"$hi\" + 13 \\rightarrow \"uv\"$\n\n### Ceasar Cipher\nRotate letters forward by $N$ position to encrypt and rotate letters backward by $N$ positions to encrypt where $N \\in [0, 25]$.\n\n#### Cracking Method 1 - Known Plaintext\nIf the attacker already knows some part of the plaintext, they can find the secret key easily and decrypt the rest.\n\n#### Cracking Method 2 - Brute Force\nThere are only 25 possible shifts(26 possible outputs). The attacker could try out each of them to decrypt the ciphertext and find the one that yielded a sensible message.\n\n#### Cracking Method 3 - Frequency Analysis\nAssuming that the plaintext is English text, It turns out we use some letters more than others.\n\n![](image-kp0q340n.png)\n\nThe attacker can analyze the frequency of the characters in the ciphertext and identify the most likely character for that respective frequency.\n\n### Vigenere Cipher\nOperation on each character exactly like Ceasar Cipher but the key is not a single letter, but a sequence of letters. Thus, different characters are subject to different substitutions. The key is repeated indefinitely and each character acts like the key for the corresponding plaintext character.\n\n**example**\n\n> $helloworld + abcabcabca \\rightarrow hfnlpyosnd$\n\n#### Cracking Method 1 - Brute Force\nSame as ceasar cipher but with more possibility.\n\n#### Cracking Method 2 - Frequency Analysis\nIf we take characters at every n positions where n is the key length, a simple substitution cipher is applied for that sequence in which frequency analysis can be applied due to the repeating nature of the key. To find the key length you need to find the repeated words in the ciphertext. A repetition is the result of the same combination of key and plaintext. The key length is a divisor of the distance of the repetitions. More repeats will yield less divisors.\n\n### One-Time Pad (OTP)\nBoth plaintext and the key are seen as bitstreams. The key is a randomly generated (truly random) bitstream that must not be reused. The ciphertext is the exclusive-or ($\\oplus$) of binary representation of the plaintext and the key (bistream). $(x \\oplus k)$ to encrypt and $(x \\oplus k) \\oplus k$ to decrypt.\n\nGiven a ciphertext C, for every possible plaintext (M), there is a key that would\nproduce C — and since the key is random, no plaintext is more likely than any\nother. $P(M | C) = P(C)$.\n\nOTP is impractical. High-quality random numbers are difficult to generate. one-time use is absolutely necessary since it’s difficult and expensive to generate a new key that is the same length as the plaintext everytime.\n\n### Stream Ciphers\nOTP key is as long the message and requires a new random number each time. Stream ciphers are ciphers that uses a pseudo random key rather than a truly random key.\n\n**Cracking Method 1 - Key Reuse**\n\nIf a pseudo random bit generator (PRBG) reuses a key, with the exclusive-or property, it can undo the the PRBG. \n\n$$$\nC_{1} \\leftarrow  M_{1} \\oplus PRBG(K) \\\\\nC_{2} \\leftarrow  M_{2} \\oplus PRBG(K) \\\\\nC_{1} \\oplus C_{2} = M_{1} \\oplus M_{2}\n$$$\n\nIf one part of the message is known, the same part of the other message can be trivially decrypted.\n\n### Block Ciphers\n","tags":[],"folderPathname":"/School/ECE458","data":{},"createdAt":"2021-05-23T04:16:51.471Z","updatedAt":"2021-05-24T11:04:36.774Z","trashed":false,"_rev":"G_paXpIN4"}