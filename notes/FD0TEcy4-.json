{"_id":"note:FD0TEcy4-","title":"WEEK 1","content":"## Communication\n\n### Remote Procedure Call (RPC)\n\nRPC is a transient communication abstraction. It behaves similarly to a conventional procedure call that passes parameters on the stack. RPCs are implemented using a client-server protocol. The application calls an RPC using a client stub that translates the call to a protocol message that is received and processed at the server by a server stub.\n\n1. The client process invokes the client stub using an ordinary procedure call.\n2. The client stub builds a message and passes it to the client's operating system (OS).\n3. The client's OS sends the message to the server's OS.\n4. The server's OS delivers the message to the server stub.\n5. The server stub unpacks the parameters and invokes the appropriate service handler in the server process.\n6. The service handler does the work and returns the result to the server stub.\n7. The server stub packs the result into a message and passes it to the server's OS.\n8. The server's OS sends the message to the client's OS.\n9. The client's OS delivers the message to the client stub.\n10. The client stub unpacks the result and returns it to the client process.\n\n### Synchronous RPC\n\nthe client waits for the return value while the server executes the procedure.\n\n### Asynchronous RPC\n\nThe client blocks until the server acknowledges receipt of the request. The result of the procedure call is not yet known.\n\n### Message Oriented Middleware\n\n#### Message Queueing Model\n\nMessages are persisted in a queue until they are consumed by a receiver.\n\n| Primitive | Definition |\n|:-- |: -- |\n| Put | Append message to a specified queue. |\n| Get | Block until the specified queue is non-empty, and remove the first message. |\n| Poll | Check a specified queue for messages, and remove the first. Never block. |\n| Notify | Install a handler to be call when a message is put into the specified queue. |\n\n#### Four Modes\n\n| Mode | Sender | Receiver |\n|:-- |:-- |:-- |\n| 1 | active | active |\n| 2 | active | passive |\n| 3 | passive | active |\n| 4 | passive | passive |\n\nThe loose coupling between the sender and receiver has some disadvantages. For example, the delivery of a message after it is sent depends on the receiver, and cannot be guaranteed. Message queueing is similar to .\n\n#### Publish Subscribe Model\n\n...\n\n### RPC vs MOM\n\nRPC:\n- used mostly for two-way communication, particularly where client requires immediate response from server (e.g., querying a NoSQL storage system)\n- the middleware is linked into the client and server processes, and no additional software infrastructure is required\n- tighter coupling means that server failure can prevent client from making progress\n\nMOM:\n- used mostly for one-way communication where one party does not require an immediate response from another (e.g., disseminating news, batch processing)\n- the middleware (e.g., event bus/message queue/tuple space) is a separate component sandwiched between the sender/publisher/producer and the receiver/subscriber/consumer\n- looser coupling isolates one process (e.g., publisher) from another (e.g., subscriber), which contributes to flexibility and scalability\n\n## Networking\n\n#### IP Address\nIP addresses identify hosts.\n\n### TCP \nTCP ports identify processes at the endpoints of a connection.\n\n#### Socket (Berkerley)\n\nSockets provide an API for inter-process communication. The Berkeley sockets API evolved into a component of the Portable Operating System Interface (POSIX) specification.\n\n| Primitive | Definition |\n|:-- |: -- |\n| Socket | Create a new communication endpoint. |\n| Bind | Attach a local address to a socket. |\n| Listen | Announce willingness to accept connections. |\n| Accept | Block caller until a connection request arrives. |\n| Connect | Actively attempts to establish a connection. |\n| Send | Send some data over the connection. |\n| Receive | Receive some data over the connection. |\n| Close | Release the connection. |\n\n#### Internet Control Message protocol (ICMP)\n\n### UDP\nUDP ports work similarly to TCP ports but UDP is connectionless.\n\n## Processes","tags":[],"folderPathname":"/School/ECE454","data":{},"createdAt":"2021-06-13T06:55:32.429Z","updatedAt":"2021-06-13T12:50:28.429Z","trashed":false,"_rev":"0NSoC1Pmp"}