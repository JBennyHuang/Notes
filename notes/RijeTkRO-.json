{"_id":"note:RijeTkRO-","title":"","content":"## Udacity\n\n### Volume: size of data\n### Variety: diversity, different sources\n### Velocity: speed at which the data is generated\n### Hadoop Distributed File System (HDFS)\n    \nShow files in hadoop\n\n    hadoop fs -ls \n\nUpload a file in hadoop\n\n    hadoop fs -put \n    \nRename or move a file in hadoop\n\n    hadoop fs -mv \n    \nRemove a file in hadoop\n    \n    hadoop fs -rm \n    \nMake directory in hadoop\n    \n    hadoop fs -mkdir\n    \n### Mapreduce\n\n#### Mappers\nThe map or mapper’s job is to process the input data. Generally the input data is in the form of file or directory and is stored in the Hadoop file system (HDFS). The input file is passed to the mapper function line by line. The mapper processes the data and creates several small chunks of data.\n\n#### Reducers \nThis stage is the combination of the Shuffle stage and the Reduce stage. The Reducer’s job is to process the data that comes from the mapper. After processing, it produces a new set of output, which will be stored in the HDFS.\n\n    hadoop jar <map reduce jar> -mapper <mapper script> -reducer <reducer script> -file <mapper.py> -file <reducer.py> -input <input> -output <output>\n\n#### Example mapper\n\n```python\ndef mapper():\n    for line in sys.stdin:\n        data = line.strip().split('\\t')\n        \n        if len(data) != 6:\n            continue\n        \n        date, time, store, item, cost, payment = data\n        \n        print(f'{store}\\t{cost}')\n```\n\nMapped data is **shuffled and sorted** before going into the reducer.\n\n#### Example reducer\n```python\ndef reducer():\n    sales_total = 0\n    old_key = None\n    \n    for line in sys.stdin:\n        data = line.strip().split('\\t')\n        \n        if len(data) != 2:\n            continue\n            \n        this_key, this_sale = data\n        \n        if old_key and old_key != this_key:\n            print(f'{old_key}\\t{sales_total}')\n            \n            sale_total = 0\n            \n        sales_total += float(this_sale)\n        old_key = this_key\n    \n    if old_key != None: \n        print(f'{old_key}\\t{sales_total}')\n```\n\n### Mapreduce Design Patterns\n\n#### Filtering Patterns\n\n1. Simple filter\n2. Bloom filter\n3. Sampling\n4. Random Sampling\n5. Top K\n\n#### Summarization Patterns\n\n1. Word/Record Count\n2. Mean \n3. Median\n4. Standard Deviation\n\n#### Structural Patterns\n\n1. Migration of structured data to hadoop","tags":[],"folderPathname":"/Extra/Hadoop","data":{},"createdAt":"2021-05-30T03:55:01.848Z","updatedAt":"2021-05-30T07:21:13.047Z","trashed":false,"_rev":"8WND_LpHq"}